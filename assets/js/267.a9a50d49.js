(window.webpackJsonp=window.webpackJsonp||[]).push([[267],{593:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类型断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[t._v("#")]),t._v(" 类型断言")]),t._v(" "),s("p",[s("sucb",[t._v("类型断言（Type Assertion）")]),t._v("在 TypeScript 中是一种告知编译器你比它更了解某个值的类型的情况。它用来强制将一个值转换为另一种类型，而不需要实际执行任何特殊转换代码。这主要用于两种场景：当你确切知道一个值的类型，但 TypeScript 无法推断时，或是将一个联合类型断言为其中一个具体的类型。")],1),t._v(" "),s("p",[t._v("类型断言的语法有两种形式：")]),t._v(" "),s("ol",[s("li",[t._v("尖括号语法："),s("sucb",[t._v("<Type>")]),t._v("value")],1),t._v(" "),s("li",[t._v("as 语法：value "),s("sucb",[t._v("as")]),t._v(" Type")],1)]),t._v(" "),s("h3",{attrs:{id:"何时使用类型断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时使用类型断言"}},[t._v("#")]),t._v(" 何时使用类型断言")]),t._v(" "),s("p",[s("strong",[t._v("消歧联合类型")]),t._v("：当你从一个联合类型中取出一个值，并且你知道它具体是哪个类型时，可以使用断言来去除其他类型。")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirstElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设我们知道第一个元素总是字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("DOM 元素操作")]),t._v("：在与 DOM 交互时，原生 JavaScript 返回的元素可能没有被 TypeScript 正确类型化，这时可以使用断言来指定元素的确切类型。")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"someId"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" HTMLInputElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nelement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New Value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时 TypeScript 知道 element 有 `.value` 属性")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("库或第三方代码")]),t._v("：当使用未提供类型定义或类型定义不够精确的外部库时，类型断言可以帮助你更好地与这些库集成。")]),t._v(" "),s("h3",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("非类型转换")]),t._v("：类型断言不会改变值，也不会执行任何类型检查或转换操作。它只是告诉编译器按照你指定的类型去处理这个值。")]),t._v(" "),s("li",[s("strong",[t._v("谨慎使用")]),t._v("：过度依赖类型断言可能导致隐藏类型错误。仅在你确定类型信息的情况下使用，且没有更好的类型安全替代方案时才考虑使用。")]),t._v(" "),s("li",[s("strong",[t._v("首选类型细化")]),t._v("：在可能的情况下，"),s("suc",[t._v("优先使用类型守卫")]),t._v("（如类型谓词、in 操作符、typeof 等）来进行类型细化，这样可以保持类型安全。")],1)]),t._v(" "),s("p",[t._v("类型断言是 TypeScript 中一个强大的特性，但应当谨慎且明智地使用，以维护代码的类型安全和清晰性。")])])}),[],!1,null,null,null);s.default=e.exports}}]);