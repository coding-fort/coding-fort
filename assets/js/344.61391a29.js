(window.webpackJsonp=window.webpackJsonp||[]).push([[344],{670:function(t,a,r){"use strict";r.r(a);var e=r(25),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"结构型设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构型设计模式"}},[t._v("#")]),t._v(" 结构型设计模式")]),t._v(" "),a("p",[t._v("结构型设计模式关注于如何组合类或对象以获得更大的结构，它们提供了一种方式来组装接口、类和对象，同时保持设计的灵活性。")]),t._v(" "),a("h2",{attrs:{id:"适配器模式-adapter-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式-adapter-pattern"}},[t._v("#")]),t._v(" 适配器模式（Adapter Pattern）")]),t._v(" "),a("p",[t._v("将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。")]),t._v(" "),a("h2",{attrs:{id:"桥接模式-bridge-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式-bridge-pattern"}},[t._v("#")]),t._v(" 桥接模式（Bridge Pattern）")]),t._v(" "),a("p",[t._v("将抽象部分与它的实现部分分离，使它们都可以独立地变化。")]),t._v(" "),a("h2",{attrs:{id:"组合模式-composite-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合模式-composite-pattern"}},[t._v("#")]),t._v(" 组合模式（Composite Pattern）")]),t._v(" "),a("p",[t._v("将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。")]),t._v(" "),a("h2",{attrs:{id:"装饰器模式-decorator-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式-decorator-pattern"}},[t._v("#")]),t._v(" 装饰器模式（Decorator Pattern）")]),t._v(" "),a("p",[t._v("动态地给一个对象添加一些额外的职责。就增加功能而言，装饰器模式相比生成子类更加灵活。")]),t._v(" "),a("h2",{attrs:{id:"外观模式-facade-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外观模式-facade-pattern"}},[t._v("#")]),t._v(" 外观模式（Facade Pattern）")]),t._v(" "),a("p",[t._v("为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。")]),t._v(" "),a("h2",{attrs:{id:"享元模式-flyweight-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#享元模式-flyweight-pattern"}},[t._v("#")]),t._v(" 享元模式（Flyweight Pattern）")]),t._v(" "),a("p",[t._v("运用共享技术来有效地支持大量细粒度的对象。")]),t._v(" "),a("h2",{attrs:{id:"代理模式-proxy-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理模式-proxy-pattern"}},[t._v("#")]),t._v(" 代理模式（Proxy Pattern）")]),t._v(" "),a("p",[t._v("为其他对象提供一个代理以控制对这个对象的访问。")])])}),[],!1,null,null,null);a.default=s.exports}}]);