(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{570:function(r,v,_){"use strict";_.r(v);var n=_(25),b=Object(n.a)({},(function(){var r=this,v=r._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[v("h1",{attrs:{id:"浏览器渲染原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染原理"}},[r._v("#")]),r._v(" 浏览器渲染原理")]),r._v(" "),v("h2",{attrs:{id:"渲染时间点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渲染时间点"}},[r._v("#")]),r._v(" 渲染时间点")]),r._v(" "),v("p",[r._v("网络线程：请求 HTML 字符串，并添加渲染任务到渲染主线程的消息队列中。")]),r._v(" "),v("p",[r._v("渲染主线程：从消息队列中取出渲染任务，开始渲染流程。")]),r._v(" "),v("bqs",[v("errb",[r._v("面试题：浏览器时如何渲染页面的？")]),v("br"),r._v("\n 当浏览器的网络线程收到HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。"),v("br"),r._v("\n在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。"),v("br"),r._v(" "),v("hr"),r._v("\n渲染的第一步为解析HTML"),v("br"),r._v("\n解析过程遇到CSS 解析CSS，遇到JS 解析JS。为了提高效率，浏览器解析前会启动一个预解析线程，率先下载HTML 中的外部CSS 文件和JS 文件。"),v("br"),r._v("\n如果主线程解析道"),v("errb",[r._v("link")]),r._v(" 位置，此时外部CSS 文件还未下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析CSS 的工作是在预解析线程中进行的。这就是CSS 不会阻塞HTML 解析的根本原因。"),v("br"),r._v("\n如果主线程解析道 "),v("errb",[r._v("script")]),r._v("位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才继续执行解析 HTML。这是因为 JS 代码执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。"),v("br"),r._v(" "),v("hr"),r._v("\n渲染的第二步微样式计算"),v("br"),r._v("\n主线程会便利的到的DOM 树，依次为树中的每个节点计算出它最终的样式，称之为Computed Style。"),v("br"),r._v("\n在这一个过程中，很多预设值会变成绝对值，比如"),v("errb",[r._v("red")]),r._v("会变成"),v("errb",[r._v("rgb(255,0,0)")]),r._v("；相对党委也会变成绝对单位，比如"),v("errb",[r._v("em")]),r._v("会变成"),v("errb",[r._v("px")]),r._v("；"),v("br"),r._v("\n这一步完成后，会得到一棵带有样式的DOM 树。\n"),v("hr"),r._v("\n接下来是布局，布局完成后会得到布局树。"),v("br"),r._v("\n布局阶段会依次便利DOM 树的每一个节点，计算每一个节点的几何信息。例如节点的宽高、相对包含块的位置。"),v("br"),r._v("\n大部分时候，DOM 树与布局树并非一一对应。"),v("br"),r._v("\n比如"),v("errb",[r._v("display:none")]),r._v("的节点没有几何信息，因此不会生成到布局树；又如伪元素选择器"),v("errb",[r._v("：：before")]),r._v("虽然DOM 树中不存在伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等都会导致DOM 树和布局树无法一一对应。\n"),v("hr"),r._v("\n下一步是分层"),v("br"),r._v("\n主线程会使用一套复杂的策略对整个布局树进行分层。"),v("br"),r._v("\n分层的好处在于，将来某一个层改变后，仅对该层进行后续处理，从而提升效率。"),v("br"),r._v("\n滚动条、堆叠上下文、transform、opacity 等样式都会或多或少影响分层结果，也可以通过「will-change」属性更大程度的影响分层结果。"),v("br"),r._v(" "),v("hr"),r._v("\n下一步是绘制，主线程会为每一个层单独生成绘制指令集，用于描述这一层的内容如何画出来。"),v("br"),r._v(" "),v("hr"),r._v("\n完成绘制后，主线程将每个图层的绘制信息提交个合成线程，剩余的工作将由合成线程完成。"),v("br"),r._v("\n合成线程首先对每个图层进行分块，将其划分为更多的小区域。"),v("br"),r._v("\n它会从线程池中拿取多个线程来完成分块工作。"),v("br"),r._v(" "),v("hr"),r._v("\n分块完成后，进入光栅化阶段"),v("br"),r._v("\n合成线程会将块信息交个GPU 进程，以极高的速度完成光栅化."),v("br"),r._v("\nGPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口的块。"),v("br"),r._v("\n光栅化的结果，就是一块一块的位图。"),v("br"),r._v(" "),v("hr"),r._v("\n最后一个阶段是画"),v("br"),r._v("\n合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。"),v("br"),r._v("\n指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑旋转、缩放等变形。"),v("br"),r._v("\n变形发生在合成线程，与渲染主线程无关，这就是"),v("prib",[r._v("transform")]),r._v("效率高的本质。"),v("br"),r._v("\n合成线程会把指引提交给GPU 进程，有GPU 进程产生系统调用，提交个GPU 硬件，完成最终的屏幕成像。\n")],1),r._v(" "),v("h2",{attrs:{id:"渲染流水线"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线"}},[r._v("#")]),r._v(" 渲染流水线")]),r._v(" "),v("ul",[v("li",[r._v("解析 HTML - Parse HTMl")])]),r._v(" "),v("p",[r._v("将 HTML 字符串解析成 DOM 树、CSS Object Model 树。")]),r._v(" "),v("bqw",[r._v("\nHTML 解析过程中遇到CSS 代码怎么办？"),v("br"),r._v("\n为了提高解析效率，浏览器会启动一个预解析器率先下载和解析CSS。"),v("br"),r._v(" "),v("br"),r._v("\n预解析线程快速「浏览HTML」，提前下载CSS，并解析。\n"),v("br"),r._v("\nHTML 解析过程中遇到JS 代码怎么办？"),v("br"),r._v("\n渲染主线程遇到JS 时必须暂停一切行为，等待下载任务结束后，等待JS 代码下载执行后才能继续。"),v("br"),r._v("\n预解析线程可以分担一些下载JS 的任务。\n")]),r._v(" "),v("ul",[v("li",[r._v("样式计算 - Recalculate Style")])]),r._v(" "),v("p",[r._v("CSS 属性值的计算过程。")]),r._v(" "),v("ul",[v("li",[r._v("布局 - Layout")])]),r._v(" "),v("p",[r._v("DOM 树 和 Layout 树不一定是一一对应的。如 DOM 树中的「display：none」 在 Layout 树中不显示，在 DOM 树中不显示的「：：before」在 Layout 树中会显示。")]),r._v(" "),v("ul",[v("li",[v("p",[r._v("分层 - Layer")])]),r._v(" "),v("li",[v("p",[r._v("绘制 - Paint")])])]),r._v(" "),v("p",[r._v("为每一个层生成如何绘制的指令。")]),r._v(" "),v("p",[r._v("渲染主线程的工作到此为止，剩余的步骤交给其他线程完成。")]),r._v(" "),v("ul",[v("li",[r._v("分块 - Tiling")])]),r._v(" "),v("p",[r._v("分块会将每一层分为多个小的区域。分块的工作时交个多个线程同时进行的。")]),r._v(" "),v("ul",[v("li",[r._v("光栅化 - Raster")])]),r._v(" "),v("p",[r._v("光栅化是将每个块变成位图，优先处理靠近视口的块。此过程会用到 GPU 加速。")]),r._v(" "),v("ul",[v("li",[r._v("画 - Draw")])]),r._v(" "),v("p",[r._v("合成线程计算出每个位图在屏幕上的位置，交个 GPU 进行最终呈现。")]),r._v(" "),v("bqs",[v("errb",[r._v("面试题：什么是reflow？")]),v("br"),r._v("\nreflow 的本质是重新计算Layout 树。"),v("br"),r._v("\n当进行了会影响布局树的操作后，需要重新计算布局树，会引发layout。"),v("br"),r._v("\n为了避免连续多次操作导致布局树反复计算，浏览器会合并这些操作，当JS 代码全部执行完后再进行统一计算。所以，改动属性造成的reflow 是异步完成的。"),v("br"),r._v("\n因为如此，当JS 获取布局属性时，就可能造成无法获取最新的布局信息。"),v("br"),r._v("\n浏览器在反复权衡下，最后决定获取属性立即reflow。\n")],1),r._v(" "),v("bqs",[v("errb",[r._v("面试题：什么是repaint？")]),v("br"),r._v("\nrepaint 的本质是重新根据分层信息计算绘制指令。"),v("br"),r._v("\n当改动可见样式后，就需要重新计算，会引发repaint。"),v("br"),r._v("\n由于元素的布局信息也属于可见样式，所以reflow 一定会引起repaint。\n")],1),r._v(" "),v("bqs",[v("errb",[r._v("为什么transform 的效率高？")]),v("br"),r._v("\n因为transform 既不会影响布局，也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」 阶段。"),v("br"),r._v("\n由于draw 阶段在合成线程中，所以transform 的变化几乎不会影响渲染线程。反之，渲染主线程无论如何忙碌，也不会影响transform 的变化。\n")],1)],1)}),[],!1,null,null,null);v.default=b.exports}}]);