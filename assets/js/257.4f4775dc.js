(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{583:function(t,e,i){"use strict";i.r(e);var r=i(25),a=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"工具库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工具库"}},[t._v("#")]),t._v(" 工具库")]),t._v(" "),e("p",[t._v("TypeScript 作为 JavaScript 的一个超集，拥有丰富的生态系统，其中包括了许多提升开发效率和代码质量的工具库。以下是一些广泛使用的 TypeScript 工具库和工具类别：")]),t._v(" "),e("h3",{attrs:{id:"_1-type-definition-libraries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-type-definition-libraries"}},[t._v("#")]),t._v(" 1. Type Definition Libraries")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("DefinitelyTyped: (@types/*) ")])],1)]),t._v(" "),e("p",[t._v("这是 TypeScript 社区维护的一个巨大的类型定义库集合，几乎涵盖了所有的 JavaScript 库。如果你想在 TypeScript 项目中使用未自带类型定义的 JS 库，通常需要从这里获取类型定义。")]),t._v(" "),e("h3",{attrs:{id:"_2-构建工具与打包器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-构建工具与打包器"}},[t._v("#")]),t._v(" 2. 构建工具与打包器")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("Webpack")]),t._v(": (webpack, typescript-loader, fork-ts-checker-webpack-plugin)")],1)]),t._v(" "),e("p",[t._v("Webpack 是一个流行的模块打包器，可以与 TypeScript 集成，通过 ts-loader 或 awesome-typescript-loader 来编译 TypeScript 代码。")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("Rollup")]),t._v(": (rollup, rollup-plugin-typescript2)")],1)]),t._v(" "),e("p",[t._v("Rollup 适合于构建库，它也有相应的 TypeScript 插件来支持 TypeScript 编译。")]),t._v(" "),e("h3",{attrs:{id:"_3-linting-and-formatting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-linting-and-formatting"}},[t._v("#")]),t._v(" 3. Linting and Formatting")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("ESLint")]),t._v(": (eslint, @typescript-eslint/parser)")],1)]),t._v(" "),e("p",[t._v("ESLint 是一个强大的代码检查工具，通过 @typescript-eslint/parser 和一系列规则，可以针对 TypeScript 进行静态分析。")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("Prettier")]),t._v(": (prettier)")],1)]),t._v(" "),e("p",[t._v("Prettier 提供代码格式化功能，支持 TypeScript，帮助团队保持一致的代码风格。")]),t._v(" "),e("h3",{attrs:{id:"_4-type-checking-and-linting-enhancements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-type-checking-and-linting-enhancements"}},[t._v("#")]),t._v(" 4. Type Checking and Linting Enhancements")]),t._v(" "),e("ul",[e("li",[e("warb",[t._v("TSLint")]),t._v("（已废弃，推荐迁移到 ESLint + @typescript-eslint）: 曾经是 TypeScript 专用的 linting 工具，但现在建议使用 ESLint 配合 @typescript-eslint。")],1),t._v(" "),e("li",[e("sucb",[t._v("TypeScript ESLint")]),t._v(": (@typescript-eslint/eslint-plugin) 提供了一套 TypeScript 特定的 linting 规则，与 ESLint 集成使用。")],1)]),t._v(" "),e("h3",{attrs:{id:"_5-测试框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-测试框架"}},[t._v("#")]),t._v(" 5. 测试框架")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("Jest")]),t._v(": (jest, @types/jest) Jest 是一个广受欢迎的测试框架，支持 TypeScript，并且有很好的类型定义支持。")],1),t._v(" "),e("li",[e("sucb",[t._v("Mocha")]),t._v(": (mocha, @types/mocha) Mocha 是另一个灵活的测试框架，同样可以很好地与 TypeScript 配合使用。")],1)]),t._v(" "),e("h3",{attrs:{id:"_6-状态管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-状态管理"}},[t._v("#")]),t._v(" 6. 状态管理")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("Redux")]),t._v(": (redux, @types/redux) Redux 是一个广泛使用的应用状态管理库，适用于各种规模的项目。")],1),t._v(" "),e("li",[e("sucb",[t._v("MobX")]),t._v(": (mobx, @types/mobx) MobX 提供了一个简单的状态管理解决方案，强调可观察数据和依赖跟踪。")],1)]),t._v(" "),e("h3",{attrs:{id:"_7-路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-路由"}},[t._v("#")]),t._v(" 7. 路由")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("React Router")]),t._v(": (react-router-dom, @types/react-router-dom) 如果你的项目使用 React，React Router 是管理前端路由的首选库。")],1)]),t._v(" "),e("h3",{attrs:{id:"_8-ui-框架与库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-ui-框架与库"}},[t._v("#")]),t._v(" 8. UI 框架与库")]),t._v(" "),e("ul",[e("li",[e("sucb",[t._v("Angular")]),t._v(": (angular) Angular 是一个完整的框架，直接基于 TypeScript 构建。")],1),t._v(" "),e("li",[e("sucb",[t._v("React")]),t._v(": (react, @types/react) 虽然是用 JavaScript 编写的，但 React 非常适合与 TypeScript 一起使用。")],1),t._v(" "),e("li",[e("sucb",[t._v("Vue")]),t._v(": (vue, vue-class-component, @vue/composition-api, @types/vue) Vue 也可以很好地与 TypeScript 集成，特别是通过 vue-class-component 或 composition API。")],1)]),t._v(" "),e("p",[t._v("以上只是冰山一角，TypeScript 生态系统非常庞大，还包括 ORM 工具（如 TypeORM）、图形界面库、国际化工具等多种类型的库，均提供了对 TypeScript 的良好支持。")])])}),[],!1,null,null,null);e.default=a.exports}}]);