(window.webpackJsonp=window.webpackJsonp||[]).push([[260],{587:function(t,s,r){"use strict";r.r(s);var v=r(25),_=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),s("p",[s("sucb",[t._v("泛型（Generics）")]),t._v("是一种允许你在创建函数、接口或类时定义类型参数的技术，从而实现更灵活和可重用的代码。泛型允许你编写能够适应多种数据类型的代码，而不用在每次使用时明确指定具体类型。这有助于提高代码的灵活性、类型安全性和重用性。下面是关于 TypeScript 泛型的一些基本概念和使用示例：")],1),t._v(" "),s("h3",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("类型参数")]),t._v("：在函数、接口或类的名称后面，使用尖括号 "),s("T",[t._v("（T 为类型参数名，可自定义）来声明一个或多个类型参数。这表示该实体可以与任何类型一起工作，直到实际调用或实例化时才确定具体类型。")])],1),t._v(" "),s("li",[s("strong",[t._v("约束")]),t._v("：可以对类型参数设置约束，限制它可以接受的类型范围，使用 extends 关键字实现。")]),t._v(" "),s("li",[s("strong",[t._v("泛型函数")]),t._v("：函数可以是泛型的，允许其参数或返回类型根据调用时提供的类型参数变化。")]),t._v(" "),s("li",[s("strong",[t._v("泛型接口")]),t._v("：接口中可以使用泛型，为实现该接口的类或对象提供类型灵活性。")]),t._v(" "),s("li",[s("strong",[t._v("泛型类")]),t._v("：类也可以是泛型的，使得类的实例化可以绑定到具体的类型。")])])])}),[],!1,null,null,null);s.default=_.exports}}]);