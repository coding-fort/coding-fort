(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{577:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"协变与逆变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协变与逆变"}},[t._v("#")]),t._v(" 协变与逆变")]),t._v(" "),a("p",[t._v("在 TypeScript 中，协变（Covariance）和逆变（Contravariance）是泛型中的两个概念，它们帮助我们处理类型之间的子类型关系。为了更好地理解这两个概念，我们可以从日常生活的例子出发。")]),t._v(" "),a("h3",{attrs:{id:"协变-covariance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协变-covariance"}},[t._v("#")]),t._v(" 协变 (Covariance)")]),t._v(" "),a("p",[t._v("协变描述的是当一个类型的参数放宽时，返回值类型变得更宽泛的情况。简单来说，如果一个容器可以装苹果，那么它一定也可以装水果，因为苹果是一种水果。这里，“装水果”的类型比“装苹果”的类型更宽泛。")]),t._v(" "),a("h4",{attrs:{id:"例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),a("p",[t._v("假设我们有一个函数 "),a("code",[t._v("getPet")]),t._v("，这个函数返回一个宠物对象。现在我们有两种宠物，一种是猫 "),a("code",[t._v("Cat")]),t._v("，另一种是动物 "),a("code",[t._v("Animal")]),t._v("，我们知道 "),a("code",[t._v("Cat")]),t._v(" 是 "),a("code",[t._v("Animal")]),t._v(" 的子类型。")]),t._v(" "),a("ul",[a("li",[t._v("如果 "),a("code",[t._v("getPet")]),t._v(" 返回 "),a("code",[t._v("Cat")]),t._v("，那么我们可以说 "),a("code",[t._v("getPet")]),t._v(" 也返回 "),a("code",[t._v("Animal")]),t._v("，因为 "),a("code",[t._v("Cat")]),t._v(" 可以赋值给 "),a("code",[t._v("Animal")]),t._v(" 类型的变量。")]),t._v(" "),a("li",[t._v("这里 "),a("code",[t._v("Animal")]),t._v(" 比 "),a("code",[t._v("Cat")]),t._v(" 更宽泛，所以这是一个协变的例子。")])]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Cat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" animal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Animal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成功，因为 Cat 是 Animal 的子类型")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h3",{attrs:{id:"逆变-contravariance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逆变-contravariance"}},[t._v("#")]),t._v(" 逆变 (Contravariance)")]),t._v(" "),a("p",[t._v("逆变则描述的是当一个类型的参数放宽时，参数类型变得更严格的情况。还是用容器来做比喻，如果一个容器可以接受任何水果，那么它肯定也能接受苹果。这里，“接受水果”的类型比“接受苹果”的类型更严格。")]),t._v(" "),a("h4",{attrs:{id:"例子-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子-2"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),a("p",[t._v("假设我们有一个函数 "),a("code",[t._v("feedPet")]),t._v("，这个函数接受一个宠物作为参数。现在我们有两种宠物，一种是猫 "),a("code",[t._v("Cat")]),t._v("，另一种是动物 "),a("code",[t._v("Animal")]),t._v("，我们知道 "),a("code",[t._v("Cat")]),t._v(" 是 "),a("code",[t._v("Animal")]),t._v(" 的子类型。")]),t._v(" "),a("ul",[a("li",[t._v("如果 "),a("code",[t._v("feedPet")]),t._v(" 接受 "),a("code",[t._v("Animal")]),t._v(" 类型的参数，那么我们也可以说 "),a("code",[t._v("feedPet")]),t._v(" 能够接受 "),a("code",[t._v("Cat")]),t._v(" 类型的参数，因为 "),a("code",[t._v("Cat")]),t._v(" 可以传递给需要 "),a("code",[t._v("Animal")]),t._v(" 类型的地方。")]),t._v(" "),a("li",[t._v("这里 "),a("code",[t._v("Animal")]),t._v(" 比 "),a("code",[t._v("Cat")]),t._v(" 更严格，所以这是一个逆变的例子。")])]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("feedPet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pet"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Animal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Feeding pet"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cat"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("feedPet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成功，因为 Cat 是 Animal 的子类型")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("协变")]),t._v("：输出变得更宽泛，通常用于返回值。")]),t._v(" "),a("li",[a("strong",[t._v("逆变")]),t._v("：输入变得更严格，通常用于参数。")])]),t._v(" "),a("p",[t._v("在 TypeScript 中，你可以使用 "),a("code",[t._v("out")]),t._v(" 和 "),a("code",[t._v("in")]),t._v(" 关键字来标记泛型参数为协变或逆变。")]),t._v(" "),a("p",[t._v("希望这些例子能够帮助你更好地理解协变和逆变的概念！如果有其他疑问，请随时提问。")])])}),[],!1,null,null,null);a.default=e.exports}}]);