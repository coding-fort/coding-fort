(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{544:function(t,a,r){"use strict";r.r(a);var e=r(25),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"es10-es2019"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es10-es2019"}},[t._v("#")]),t._v(" ES10(ES2019)")]),t._v(" "),a("p",[t._v("ECMAScript 2019，也称为 ES10，是 JavaScript 标准的第十版，于 2019 年 6 月正式发布。ES10 引入了一系列改进和新特性，旨在提高语言的可读性和开发效率。以下是 ES10 中的一些主要新增特性：")]),t._v(" "),a("h3",{attrs:{id:"_1-flat-map-array-prototype-flatmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-flat-map-array-prototype-flatmap"}},[t._v("#")]),t._v(" 1. Flat Map (Array.prototype.flatMap)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("flatMap")]),t._v(" 是 "),a("code",[t._v("Array.prototype")]),t._v(" 中的新方法，它结合了 "),a("code",[t._v("map")]),t._v(" 和 "),a("code",[t._v("flat")]),t._v(" 的功能，可以同时对数组的每一项执行函数操作并展平结果。")])]),t._v(" "),a("h3",{attrs:{id:"_2-from-entries-object-fromentries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-from-entries-object-fromentries"}},[t._v("#")]),t._v(" 2. From Entries (Object.fromEntries)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.fromEntries")]),t._v(" 允许你将键值对的数组转换为对象，这与 "),a("code",[t._v("Object.entries")]),t._v(" 的功能相反。")])]),t._v(" "),a("h3",{attrs:{id:"_3-optional-catch-binding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-optional-catch-binding"}},[t._v("#")]),t._v(" 3. Optional Catch Binding")]),t._v(" "),a("ul",[a("li",[t._v("当使用 "),a("code",[t._v("try...catch")]),t._v(" 结构时，你不再需要定义 "),a("code",[t._v("catch")]),t._v(" 块中的变量。如果不需要捕获错误的具体信息，可以直接省略变量名，如："),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// some code")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle error without needing the error variable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"_4-string-trimming-methods-trimstart-trimend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-string-trimming-methods-trimstart-trimend"}},[t._v("#")]),t._v(" 4. String Trimming Methods (trimStart, trimEnd)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("String.prototype.trimStart")]),t._v(" 和 "),a("code",[t._v("String.prototype.trimEnd")]),t._v(" 分别用于移除字符串开头和结尾的空白字符，这比使用 "),a("code",[t._v("trim")]),t._v(" 更加灵活。")])]),t._v(" "),a("h3",{attrs:{id:"_5-improvements-to-the-regexp-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-improvements-to-the-regexp-constructor"}},[t._v("#")]),t._v(" 5. Improvements to the RegExp Constructor")]),t._v(" "),a("ul",[a("li",[t._v("正则表达式的构造函数现在允许使用字符串作为参数，并且支持 "),a("code",[t._v("u")]),t._v(" 和 "),a("code",[t._v("y")]),t._v(" 标志。")])]),t._v(" "),a("h3",{attrs:{id:"_6-bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-bigint"}},[t._v("#")]),t._v(" 6. BigInt")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("BigInt")]),t._v(" 是一种新的原始数据类型，可以安全地存储和操作任意大的整数。这对于需要高精度计算的大数运算场景非常重要。")])]),t._v(" "),a("h3",{attrs:{id:"_7-array-prototype-flat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-array-prototype-flat"}},[t._v("#")]),t._v(" 7. Array.prototype.flat")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("flat")]),t._v(" 方法可以用来扁平化嵌套数组，你还可以指定扁平化的深度。")])]),t._v(" "),a("h3",{attrs:{id:"_8-object-values-and-object-entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-object-values-and-object-entries"}},[t._v("#")]),t._v(" 8. Object.values and Object.entries")]),t._v(" "),a("ul",[a("li",[t._v("这两个方法分别返回对象的所有值和所有键值对，使遍历对象变得更简单。")])]),t._v(" "),a("h3",{attrs:{id:"_9-function-prototype-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-function-prototype-tostring"}},[t._v("#")]),t._v(" 9. Function.prototype.toString")]),t._v(" "),a("ul",[a("li",[t._v("改进了 "),a("code",[t._v("toString")]),t._v(" 方法的行为，当应用于箭头函数时，它现在会返回包括箭头语法在内的完整函数体。")])]),t._v(" "),a("h3",{attrs:{id:"_10-symbol-prototype-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-symbol-prototype-description"}},[t._v("#")]),t._v(" 10. Symbol.prototype.description")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- `Symbol` 类型的实例现在有了一个 `description` 属性，可以获取创建符号时提供的描述字符串。\n")])])]),a("p",[t._v("这些特性增强了 JavaScript 的功能性和灵活性，使得开发人员可以更高效、更安全地编写代码。随着更多浏览器对 ES10 的支持，这些新特性逐渐成为了日常编码的一部分。")])])}),[],!1,null,null,null);a.default=s.exports}}]);