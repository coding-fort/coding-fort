(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{582:function(s,t,a){"use strict";a.r(t);var r=a(25),n=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"声明文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明文件"}},[s._v("#")]),s._v(" 声明文件")]),s._v(" "),t("p",[s._v("TypeScript "),t("sucb",[s._v("声明文件（Declaration Files）")]),s._v("通常以 "),t("errb",[s._v(".d.ts")]),s._v(" 为扩展名，它们的作用是为 TypeScript 编译器提供缺失的类型信息，特别是针对那些没有直接提供类型定义的 JavaScript 库。声明文件让开发者在使用这些外部库时，能够享受到 TypeScript 的静态类型检查和智能提示等优势，而不必手动编写类型注解。以下是关于 .d.ts 声明文件的一些关键点和使用方法：")],1),s._v(" "),t("h3",{attrs:{id:"基本结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本结构"}},[s._v("#")]),s._v(" 基本结构")]),s._v(" "),t("p",[s._v("声明文件的基本结构类似于普通的 TypeScript 文件，但它们不包含实际的实现代码，而是专注于类型定义。一个简单的声明文件可能看起来像这样：")]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// myLib.d.ts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("module")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myLib"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doSomething")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("input"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyLibOptions")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    debug"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"导入和导出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入和导出"}},[s._v("#")]),s._v(" 导入和导出")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("declare module")]),s._v(": 用于定义一个模块的类型，如上例所示，它描述了模块 myLib 的类型信息。")]),s._v(" "),t("li",[t("strong",[s._v("export")]),s._v(": 用于公开模块内的类型，使得其他文件可以通过 import 语句来使用这些类型。")])]),s._v(" "),t("h3",{attrs:{id:"全局声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局声明"}},[s._v("#")]),s._v(" 全局声明")]),s._v(" "),t("p",[s._v("如果你需要定义全局变量或函数，可以使用 "),t("sucb",[s._v("declare")]),s._v(" 关键字在全局作用域声明它们：")],1),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// global.d.ts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("message"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" MyGlobalVar"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"使用声明文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用声明文件"}},[s._v("#")]),s._v(" 使用声明文件")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("安装第三方类型定义")]),s._v("：许多流行的 JavaScript 库已经有对应的.d.ts 文件，可通过 @types 在 npm 上安装。例如，npm install @types/lodash 会安装 lodash 库的类型定义。")]),s._v(" "),t("li",[t("strong",[s._v("手动创建或引用")]),s._v("：对于没有现成类型定义的库，你可以自己创建声明文件，并在项目中通过 /// "),t("reference",{attrs:{path:"path/to/myLib.d.ts"}}),s._v(" 引用，或者使用 import 语句直接导入。")],1)]),s._v(" "),t("h3",{attrs:{id:"注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[s._v("#")]),s._v(" 注意事项")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("不包含实现")]),s._v("：声明文件仅提供类型信息，不包含任何实际的实现代码。")]),s._v(" "),t("li",[t("strong",[s._v("兼容性")]),s._v("：确保声明文件与库的实际实现保持一致，以避免类型错误。")]),s._v(" "),t("li",[t("strong",[s._v("类型覆盖")]),s._v("：如果库本身提供了类型定义，但你需要对其进行扩展或覆盖，可以创建一个新的声明文件来补充或修改原有的类型定义。")])]),s._v(" "),t("p",[s._v("通过使用声明文件，开发者可以在 TypeScript 项目中无缝集成和利用大量的 JavaScript 库，同时保持代码的类型安全性和开发效率。")])])}),[],!1,null,null,null);t.default=n.exports}}]);