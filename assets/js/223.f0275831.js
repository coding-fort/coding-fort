(window.webpackJsonp=window.webpackJsonp||[]).push([[223],{549:function(_,t,e){"use strict";e.r(t);var v=e(25),a=Object(v.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"es5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es5"}},[_._v("#")]),_._v(" ES5")]),_._v(" "),t("p",[_._v("ECMAScript 5（简称 ES5）是 JavaScript 的一个版本标准，发布于 2009 年 12 月。ES5 是在 ECMAScript 3 标准基础上的重大升级，它引入了一系列新特性，改进了语言的严谨性和功能性，同时增强了对旧版代码的兼容性。以下是一些 ES5 的关键特性：")]),_._v(" "),t("h3",{attrs:{id:"_1-严格模式-strict-mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-严格模式-strict-mode"}},[_._v("#")]),_._v(" 1. 严格模式（Strict Mode）")]),_._v(" "),t("ul",[t("li",[_._v("通过在脚本或函数顶部使用 "),t("code",[_._v('"use strict";')]),_._v(" 开启严格模式，可以消除 JavaScript 语言的一些不合理部分，减少一些常见的编码错误，提高代码的严谨性。")])]),_._v(" "),t("h3",{attrs:{id:"_2-函数参数默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数参数默认值"}},[_._v("#")]),_._v(" 2. 函数参数默认值")]),_._v(" "),t("ul",[t("li",[_._v("虽然 ES5 本身并没有直接支持函数参数的默认值，但是可以通过在函数体内检查参数是否为 "),t("code",[_._v("undefined")]),_._v(" 来实现类似的功能。ES6 正式引入了此特性。")])]),_._v(" "),t("h3",{attrs:{id:"_3-数组方法的增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组方法的增强"}},[_._v("#")]),_._v(" 3. 数组方法的增强")]),_._v(" "),t("ul",[t("li",[_._v("引入了多个实用的数组方法，如 "),t("code",[_._v("forEach")]),_._v(", "),t("code",[_._v("map")]),_._v(", "),t("code",[_._v("filter")]),_._v(", "),t("code",[_._v("reduce")]),_._v(", "),t("code",[_._v("every")]),_._v(", "),t("code",[_._v("some")]),_._v(", "),t("code",[_._v("indexOf")]),_._v(", "),t("code",[_._v("lastIndexOf")]),_._v(" 等，这些方法简化了数组的处理和遍历逻辑。")])]),_._v(" "),t("h3",{attrs:{id:"_4-json-对象的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-json-对象的方法"}},[_._v("#")]),_._v(" 4. JSON 对象的方法")]),_._v(" "),t("ul",[t("li",[_._v("引入了 "),t("code",[_._v("JSON.stringify")]),_._v(" 和 "),t("code",[_._v("JSON.parse")]),_._v(" 方法，用于序列化和解析 JSON 数据，使得与服务器端的数据交换更加方便。")])]),_._v(" "),t("h3",{attrs:{id:"_5-object-对象的增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-object-对象的增强"}},[_._v("#")]),_._v(" 5. Object 对象的增强")]),_._v(" "),t("ul",[t("li",[_._v("引入了 "),t("code",[_._v("Object.create")]),_._v(", "),t("code",[_._v("Object.defineProperty")]),_._v(", "),t("code",[_._v("Object.getOwnPropertyDescriptor")]),_._v(", "),t("code",[_._v("Object.getOwnPropertyNames")]),_._v(", "),t("code",[_._v("Object.keys")]),_._v(" 等方法，提供了更强大的对象操作能力。")])]),_._v(" "),t("h3",{attrs:{id:"_6-类型检测的改进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-类型检测的改进"}},[_._v("#")]),_._v(" 6. 类型检测的改进")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("typeof null")]),_._v(" 返回 "),t("code",[_._v('"object"')]),_._v(" 而不是 "),t("code",[_._v('"null"')]),_._v("，这是为了与早期版本的 JavaScript 保持一致。")]),_._v(" "),t("li",[t("code",[_._v("Array.isArray")]),_._v(" 方法的引入，提供了一种更可靠的方式来检测一个值是否为数组。")])]),_._v(" "),t("h3",{attrs:{id:"_7-变量提升的限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-变量提升的限制"}},[_._v("#")]),_._v(" 7. 变量提升的限制")]),_._v(" "),t("ul",[t("li",[_._v("在严格模式下，变量提升（hoisting）的行为受到限制，未声明的变量会抛出错误，这有助于避免一些常见的编程错误。")])]),_._v(" "),t("h3",{attrs:{id:"_8-函数表达式的名称"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-函数表达式的名称"}},[_._v("#")]),_._v(" 8. 函数表达式的名称")]),_._v(" "),t("ul",[t("li",[_._v("函数表达式现在可以有名称，这在递归调用和错误栈跟踪中非常有用。")])]),_._v(" "),t("h3",{attrs:{id:"_9-删除操作符的改进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-删除操作符的改进"}},[_._v("#")]),_._v(" 9. 删除操作符的改进")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("delete")]),_._v(" 操作符现在可以删除数组元素的引用，但不会改变数组的长度。")])]),_._v(" "),t("h3",{attrs:{id:"_10-数值和字符串的改进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-数值和字符串的改进"}},[_._v("#")]),_._v(" 10. 数值和字符串的改进")]),_._v(" "),t("ul",[t("li",[_._v("引入了 "),t("code",[_._v("Number.isFinite")]),_._v(", "),t("code",[_._v("Number.isNaN")]),_._v(", "),t("code",[_._v("String.trim")]),_._v(" 等方法，增强了对数值和字符串的操作。")])]),_._v(" "),t("p",[_._v("ES5 的推出标志着 JavaScript 向更现代、更强大的编程语言迈出了一大步，它为后续版本（如 ES6 和更高版本）奠定了基础。尽管如此，由于历史原因和向后兼容性的考虑，ES5 仍然保留了一些早期 JavaScript 的特性和行为。")])])}),[],!1,null,null,null);t.default=a.exports}}]);